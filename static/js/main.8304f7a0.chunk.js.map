{"version":3,"sources":["components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","saved","localStorage","getItem","JSON","parse","displayTime","setDisplayTime","elapse","setElapse","colorChange","setColorChange","buttonStatus","setButtonStatus","useEffect","setItem","stringify","interval","setInterval","convertMilliseconds","colorString","clearInterval","lastRecorded","Date","length","currentTime","elapseTime","updateCurrentTime","now","counter","Math","floor","days","hours","numDays","numHours","numMinutes","numSeconds","numLeft","Navbar","className","color","light","expand","NavbarBrand","href","Collapse","navbar","Nav","style","Button","onClick","newStamp","arr","toLocaleString","slice","reverse","map","e","Toast","ToastHeader","ToastBody","splice","recover","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8304f7a0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Alert, Button, Toast, ToastBody, ToastHeader, Collapse, Navbar, NavbarBrand, Nav  } from \"reactstrap\";\n\nfunction Home() {\n\n  const [displayTime, setDisplayTime] = useState(() => {\n    const saved = localStorage.getItem(\"recent\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  \n  const [elapse, setElapse] = useState (\"\");\n  const [colorChange, setColorChange] = useState (\"\");\n  const [buttonStatus, setButtonStatus] = useState ('\"warning\" disabled');\n  \n  useEffect(() => {\n    localStorage.setItem(\"recent\", JSON.stringify(displayTime));\n    const interval = setInterval(()=> {\n      setElapse (convertMilliseconds());\n      setColorChange(colorString());      \n    }, 1000);\n    return () => clearInterval(interval);\n    \n  });\n  \n  var lastRecorded = new Date(displayTime[displayTime.length-1]);\n  var currentTime = new Date();\n  var elapseTime =  currentTime - lastRecorded;\n  \n  const recordTime = () => {\n    const newStamp = new Date();\n    setDisplayTime(arr => [...arr, newStamp.toLocaleString()]);\n    updateCurrentTime();\n    setElapse();\n    localStorage.getItem(\"recent\");\n  };\n  \n  const updateCurrentTime = () => {\n    currentTime = Date.now();\n  };\n\n  const colorString = () => {\n    let counter = 255;\n    if (elapseTime < 255000) {\n      counter =  Math.floor(elapseTime/1000);\n    }\n    return \"rgb(\" + counter + \", 255, 255)\"\n  };\n  \n  const convertMilliseconds = () => {\n    const days = 86400000, hours = 3600000, minutes = 60000, seconds = 1000;\n    \n    let numDays = 0, numHours = 0, numMinutes = 0, numSeconds = 0;\n    \n    if (elapseTime > 0) {\n      let numLeft = elapseTime;\n      if (numLeft > 86400000)\n      {\n        numDays = Math.floor(numLeft/days);\n        numLeft = numLeft - (numDays * days);\n      };\n      if (numLeft > 3600000) {\n        numHours = Math.floor (numLeft/hours);\n        numLeft = numLeft - (numHours * hours);\n      };\n      if (numLeft > 60000) {\n        numMinutes = Math.floor (numLeft/minutes);\n        numLeft = numLeft - (numMinutes * minutes);\n      };\n      if (numLeft > 1000) {\n        numSeconds = Math.floor (numLeft/seconds);\n      };\n    };\n    return numDays + \" days \" + numHours + \" hours \" + numMinutes + \" minutes \" + numSeconds + \" seconds \";\n  };\n\n  const deleteRecent = () => {\n    localStorage.setItem(\"deleted\", displayTime[displayTime.length-1]);\n    displayTime.splice(displayTime.length-1);\n    localStorage.setItem(\"recent\", JSON.stringify(displayTime));\n    setButtonStatus ('\"warning\" active');\n  };\n\n  const recoverDeleted = () => {\n    let recover = localStorage.getItem(\"deleted\");\n    setDisplayTime(arr => [...arr, recover]);\n    setButtonStatus ('\"warning\" disabled');\n  };\n  \n  \n  const clearLog = () => {\n    setDisplayTime([]);\n    elapseTime = 0;\n  };\n  \n  // console.log(\n  //   \"\\nlast recorded: \" + lastRecorded + \n  //   \"\\ncurrent Time:  \" + currentTime + \n  //   \"\\nelapsed time:  \" + elapseTime + \n  //   \"\\nDISPLAY        \" + displayTime[displayTime.length -1] +\n  //   \"\\nconversion \" + convertMilliseconds() +\n  //   \"\\nColor String: \" + colorChange\n  //   );\n\n  // console.log(\"displayTime array: \" + displayTime);\n  // console.log(\"button status: \" + buttonStatus);\n\n  \n  \n  return (\n    <div>\n      <Navbar className=\"NavBar\" color=\"dark\" light expand=\"md\">\n        <NavbarBrand className=\"text-white\" href=\"/\"> Keeping Time</NavbarBrand>\n        <Collapse navbar>\n          <Nav className=\"mr-auto\" navbar></Nav>\n        </Collapse>\n      </Navbar>\n      <div className=\"welcome\">\n        <div className=\"button-board\" style={{color:colorChange}}>\n          <Button className=\"log-button\" color=\"light\" onClick={recordTime}>\n            Log Time Now\n          </Button>\n\n          <div>\n    </div>\n          <div className=\"elapse\">\n        <p>Time since last log:</p>\n        <p > {elapse}</p>\n          </div>\n        </div>\n        {displayTime\n          .slice(0)\n          .reverse()\n          .map(e => (\n            <p>\n              <Toast className=\"\">\n                <ToastHeader>STAMPED</ToastHeader>\n                <ToastBody>{e}</ToastBody>\n              </Toast>\n            </p>\n          ))}\n        <Button className=\"clear\" color=\"dark\" onClick={clearLog}>\n          {\" \"}\n          Clear Storage\n        </Button>\n          <Button className=\"warning\" color=\"dark\" onClick={deleteRecent}>\n            Delete Recent\n          </Button>\n      <Button className={buttonStatus} color=\"dark\" onClick={recoverDeleted}>\n            Recover Recent\n          </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={\"/timestamp\"}>\n      <Route exact path=\"/\" component={Home}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}