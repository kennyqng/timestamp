{"version":3,"sources":["components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Home","useState","saved","localStorage","getItem","JSON","parse","displayTime","setDisplayTime","elapse","setElapse","useEffect","setItem","stringify","interval","setInterval","convertMilliseconds","clearInterval","lastRecorded","Date","length","currentTime","elapseTime","updateCurrentTime","now","days","hours","numDays","numHours","numMinutes","numSeconds","numLeft","Math","floor","console","log","Navbar","className","color","light","expand","NavbarBrand","href","Collapse","navbar","Nav","Button","onClick","newStamp","arr","toString","slice","reverse","map","e","Toast","ToastHeader","ToastBody","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAsHeA,MAjHf,WACE,MAAsCC,oBAAS,WAC7C,IAAMC,EAAQC,aAAaC,QAAQ,UAEnC,OADqBC,KAAKC,MAAMJ,IACT,MAHzB,mBAAOK,EAAP,KAAoBC,EAApB,KAMA,EAA4BP,mBAAU,IAAtC,mBAAOQ,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRR,aAAaS,QAAQ,SAAUP,KAAKQ,UAAUN,IAC9C,IAAMO,EAAWC,aAAY,WAC3BL,EAAWM,OACV,KACH,OAAO,kBAAMC,cAAcH,OAI7B,IAAII,EAAe,IAAIC,KAAKZ,EAAYA,EAAYa,OAAO,IACvDC,EAAc,IAAIF,KAClBG,EAAcD,EAAcH,EAS1BK,EAAoB,WACxBF,EAAcF,KAAKK,OAIfR,EAAsB,WAC1B,IAAMS,EAAO,MAAUC,EAAQ,KAE3BC,EAAU,EAAGC,EAAW,EAAGC,EAAa,EAAGC,EAAa,EAE5D,GAAIR,EAAa,EAAG,CAClB,IAAIS,EAAUT,EACVS,EAAU,QAGZA,IADAJ,EAAUK,KAAKC,MAAMF,EAAQN,IACEA,GAE7BM,EAAU,OAEZA,IADAH,EAAWI,KAAKC,MAAOF,EAAQL,IACCA,GAE9BK,EAAU,MAEZA,GAjB8C,KAgB9CF,EAAaG,KAAKC,MAAOF,EAhBqB,OAmB5CA,EAAU,MACZD,EAAaE,KAAKC,MAAOF,EApBsC,MAuBnE,OAAOJ,EAAU,SAAWC,EAAW,UAAYC,EAAa,YAAcC,EAAa,aAkB7F,OATAI,QAAQC,IACN,oBAAsBjB,EACtB,oBAAsBG,EACtB,oBAAsBC,EACtB,oBAAsBf,EAAYA,EAAYa,OAAQ,GACtD,gBAAkBJ,KAKlB,gCACE,eAACoB,EAAA,EAAD,CAAQC,UAAU,SAASC,MAAM,QAAQC,OAAK,EAACC,OAAO,KAAtD,UACE,cAACC,EAAA,EAAD,CAAaJ,UAAU,QAAQK,KAAK,IAApC,2BACA,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAKR,UAAU,UAAUO,QAAM,SAGnC,sBAAKP,UAAU,UAAf,UACE,sBAAKA,UAAU,eAAf,UACE,cAACS,EAAA,EAAD,CAAQT,UAAU,UAAUC,MAAM,UAAUS,QAhEjC,WACjB,IAAMC,EAAW,IAAI7B,KACrBX,GAAe,SAAAyC,GAAG,4BAAQA,GAAR,CAAaD,EAASE,gBACxC3B,IACApB,aAAaC,QAAQ,WA4Df,0BAGA,qDAA2B,kCAAKK,QAIjCF,EACE4C,MAAM,GACNC,UACAC,KAAI,SAAAC,GAAC,OACJ,4BACE,eAACC,EAAA,EAAD,CAAOlB,UAAU,GAAjB,UACE,cAACmB,EAAA,EAAD,sBACA,cAACC,EAAA,EAAD,UAAYH,YAIpB,eAACR,EAAA,EAAD,CAAQR,MAAM,SAASD,UAAU,QAAQU,QA1C9B,WACfvC,EAAe,IACfc,EAAa,GAwCT,UACG,IADH,0B,MChGOoC,MARf,WACE,OACE,cAAC,IAAD,CAAQC,SAAU,aAAlB,SACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9D,OCIxB+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.037473eb.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button } from \"reactstrap\";\nimport { Toast, ToastBody, ToastHeader } from \"reactstrap\";\nimport { Collapse, Navbar, NavbarBrand, Nav, NavbarText } from \"reactstrap\";\n\nfunction Home() {\n  const [displayTime, setDisplayTime] = useState(() => {\n    const saved = localStorage.getItem(\"recent\");\n    const initialValue = JSON.parse(saved);\n    return initialValue || [];\n  });\n  \n  const [elapse, setElapse] = useState (\"\");\n  \n  useEffect(() => {\n    localStorage.setItem(\"recent\", JSON.stringify(displayTime));\n    const interval = setInterval(()=> {\n      setElapse (convertMilliseconds());\n    }, 1000);\n    return () => clearInterval(interval);\n    \n  });\n\n  var lastRecorded = new Date(displayTime[displayTime.length-1]);\n  var currentTime = new Date();\n  var elapseTime =  currentTime - lastRecorded;\n  \n  const recordTime = () => {\n    const newStamp = new Date();\n    setDisplayTime(arr => [...arr, newStamp.toString()]);\n    updateCurrentTime();\n    localStorage.getItem(\"recent\");\n  };\n  \n  const updateCurrentTime = () => {\n    currentTime = Date.now();\n  };\n  \n  \n  const convertMilliseconds = () => {\n    const days = 86400000, hours = 3600000, minutes = 60000, seconds = 1000;\n    \n    let numDays = 0, numHours = 0, numMinutes = 0, numSeconds = 0;\n    \n    if (elapseTime > 0) {\n      let numLeft = elapseTime;\n      if (numLeft > 86400000)\n      {\n        numDays = Math.floor(numLeft/days);\n        numLeft = numLeft - (numDays * days);\n      };\n      if (numLeft > 3600000) {\n        numHours = Math.floor (numLeft/hours);\n        numLeft = numLeft - (numHours * hours);\n      };\n      if (numLeft > 60000) {\n        numMinutes = Math.floor (numLeft/minutes);\n        numLeft = numLeft - (numMinutes * minutes);\n      };\n      if (numLeft > 1000) {\n        numSeconds = Math.floor (numLeft/seconds);\n      };\n    };\n    return numDays + \" days \" + numHours + \" hours \" + numMinutes + \" minutes \" + numSeconds + \" seconds \";\n  };\n  \n  \n  const clearLog = () => {\n    setDisplayTime([]);\n    elapseTime = 0;\n  };\n  \n  console.log(\n    \"\\nlast recorded: \" + lastRecorded + \n    \"\\ncurrent Time:  \" + currentTime + \n    \"\\nelapsed time:  \" + elapseTime + \n    \"\\nDISPLAY        \" + displayTime[displayTime.length -1] +\n    \"\\nconversion \" + convertMilliseconds()\n    );\n  \n  \n  return (\n    <div>\n      <Navbar className=\"NavBar\" color=\"light\" light expand=\"md\">\n        <NavbarBrand className=\"Brand\" href=\"/\"> Keeping Time</NavbarBrand>\n        <Collapse navbar>\n          <Nav className=\"mr-auto\" navbar></Nav>\n        </Collapse>\n      </Navbar>\n      <div className=\"welcome\">\n        <div className=\"button-board\">\n          <Button className=\"warning\" color=\"warning\" onClick={recordTime}>\n            Log Time Now\n          </Button>\n          <p>Time since last log:</p><p> {elapse}</p>\n          {/* <p>current time:</p><p> {currentTime.toString()}</p>\n          <p>last recorded: </p><p> {lastRecorded.toString()}</p> */}\n        </div>\n        {displayTime\n          .slice(0)\n          .reverse()\n          .map(e => (\n            <p>\n              <Toast className=\"\">\n                <ToastHeader>STAMPED</ToastHeader>\n                <ToastBody>{e}</ToastBody>\n              </Toast>\n            </p>\n          ))}\n        <Button color=\"danger\" className=\"clear\" onClick={clearLog}>\n          {\" \"}\n          Clear Storage\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router basename={\"/timestamp\"}>\n      <Route exact path=\"/\" component={Home}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}